/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ClientRequest;
import io.swagger.model.License;
import io.swagger.model.LicenseRequest;
import io.swagger.model.LicenseSet;
import io.swagger.model.RestError;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-26T18:26:46.616Z")

@Api(value = "license", description = "the license API")
public interface LicenseApi {

    @ApiOperation(value = "Get license by id", nickname = "licenseLicenseIdGet", notes = "", response = License.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = License.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/license/{licenseId}",
        method = RequestMethod.GET)
    ResponseEntity<License> licenseLicenseIdGet(@ApiParam(value = "UUID of the license",required=true) @PathVariable("licenseId") UUID licenseId);


    @ApiOperation(value = "Remove all current client assignments from license", nickname = "licenseLicenseSetLicenseSetIdDelete", notes = "if the license model includes a minimum count, and removing the client does not violate the minimum, (or no minimum) then end the client relationship and marks the license as deleted.  If the license model does have a minimum, and deleting the client violates that, then just marks the client as deleted and leaves the license as active and resets options to defaults (We wouldn't actually expect a min/max license type to have options however...)  If the license model is an MSA, then delete the license.  (All deletes are soft-deletes, btw) ", response = License.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success - License assignments removed. License may be marked as deleted.", response = License.class) })
    @RequestMapping(value = "/license/licenseSet/{licenseSetId}",
        method = RequestMethod.DELETE)
    ResponseEntity<License> licenseLicenseSetLicenseSetIdDelete(@ApiParam(value = "",required=true) @PathVariable("licenseSetId") UUID licenseSetId);


    @ApiOperation(value = "search licenses", nickname = "listLicense", notes = "Returns all licenses that are visible to the user. Can be filtered to show licenses assigned for a specific company (if user has access to multiple companies), by license set (GM5, Audio, etc), or by Result set includes pagination information ", response = LicenseSet.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = LicenseSet.class),
        @ApiResponse(code = 400, message = "Not allowed", response = RestError.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/license",
        method = RequestMethod.GET)
    ResponseEntity<LicenseSet> listLicense(@ApiParam(value = "Number of rows to return per page.") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "page number (1 based)") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "sort attributes") @Valid @RequestParam(value = "sort", required = false) String sort,@ApiParam(value = "Sort direction; ascending or descending order. Default: ascending.", allowableValues = "asc, desc") @Valid @RequestParam(value = "dir", required = false) String dir,@ApiParam(value = "filter by companyId") @Valid @RequestParam(value = "companyid", required = false) UUID companyid,@ApiParam(value = "filter by license set id") @Valid @RequestParam(value = "licensesetid", required = false) UUID licensesetid,@ApiParam(value = "should results include only active license assignments (defaults to true)", defaultValue = "true") @Valid @RequestParam(value = "activeonly", required = false, defaultValue="true") Boolean activeonly,@ApiParam(value = "filter by contract id") @Valid @RequestParam(value = "contractid", required = false) UUID contractid,@ApiParam(value = "filter by client id") @Valid @RequestParam(value = "clientid", required = false) UUID clientid);


    @ApiOperation(value = "Change the client currently assigned to this license", nickname = "modifyLicense", notes = "This call will change the assigned client information for the source type listed in the request body. It will put an endDate on the previously assigned client based on the startDate of the request body. ", response = License.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success - License reassigned.", response = License.class),
        @ApiResponse(code = 400, message = "Error creating license assignment for client (License not active, missing req'd data", response = RestError.class) })
    @RequestMapping(value = "/license/licenseSet/{licenseSetId}",
        method = RequestMethod.PUT)
    ResponseEntity<License> modifyLicense(@ApiParam(value = "",required=true) @PathVariable("licenseSetId") UUID licenseSetId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ClientRequest client);


    @ApiOperation(value = "Create a new license in the given licenseSet with optional client information", nickname = "newLicense", notes = "Allows an admin to modify the client assignment of an existing license. If a clientId is passed, then the license is assigned to the existing client. If a Client object is passed, a new client will be created and assigned. ", response = License.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = License.class),
        @ApiResponse(code = 400, message = "max licenses already assigned for this licenseSet, or licenseSet not found", response = RestError.class) })
    @RequestMapping(value = "/license/licenseSet/{licenseSetId}",
        method = RequestMethod.POST)
    ResponseEntity<License> newLicense(@ApiParam(value = "UUID of the licenseSet",required=true) @PathVariable("licenseSetId") UUID licenseSetId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody LicenseRequest licenceUpdate);

}
