/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Contract;
import io.swagger.model.LicenseSet;
import io.swagger.model.RestError;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-26T18:31:41.974Z")

@Api(value = "contract", description = "the contract API")
public interface ContractApi {

    @ApiOperation(value = "Set this License set as the default", nickname = "contractContractIdLicensesetLicenseSetIdDefaultPost", notes = "Sets the default flag to true for this LicenseSet, and modifies all other licenseSets in this contract as default = false ", tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Not allowed", response = RestError.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/contract/{contractId}/licenseset/{licenseSetId}/default",
        method = RequestMethod.POST)
    ResponseEntity<Void> contractContractIdLicensesetLicenseSetIdDefaultPost(@ApiParam(value = "Id of the legal entity contract.",required=true) @PathVariable("contractId") String contractId,@ApiParam(value = "Id of the License Set.",required=true) @PathVariable("licenseSetId") String licenseSetId);


    @ApiOperation(value = "Get a contract by legal entity id", nickname = "getContractByLegalEntity", notes = "Get a contract by its UUID", response = Contract.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Contract found", response = Contract.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/contract/legalEntity/{legalEntityId}",
        method = RequestMethod.GET)
    ResponseEntity<Contract> getContractByLegalEntity(@ApiParam(value = "UUID of contract to be fetched",required=true) @PathVariable("legalEntityId") UUID legalEntityId);


    @ApiOperation(value = "Get a contract by provider id", nickname = "getContractByProvider", notes = "Get a contract by its UUID", response = Contract.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Contract found", response = Contract.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/contract/provider/{providerId}",
        method = RequestMethod.GET)
    ResponseEntity<Contract> getContractByProvider(@ApiParam(value = "UUID of contract to be fetched",required=true) @PathVariable("providerId") UUID providerId);


    @ApiOperation(value = "List all licenseSets for contract", nickname = "listLicenseSets", notes = "List all license-able components for a particular contract", response = LicenseSet.class, responseContainer = "List", tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success. If no results found, empty list", response = LicenseSet.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/contract/{contractId}/licenseset",
        method = RequestMethod.GET)
    ResponseEntity<List<LicenseSet>> listLicenseSets(@ApiParam(value = "",required=true) @PathVariable("contractId") String contractId);


    @ApiOperation(value = "Get a specific licenseSet from this contract", nickname = "listLicenseSetsByContract", notes = "Get a specific licenseSet", response = LicenseSet.class, tags={ "License Mgmt - external", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = LicenseSet.class),
        @ApiResponse(code = 404, message = "Not found", response = RestError.class) })
    @RequestMapping(value = "/contract/{contractId}/licenseset/{licenseSetId}",
        method = RequestMethod.GET)
    ResponseEntity<LicenseSet> listLicenseSetsByContract(@ApiParam(value = "Id of the legal entity contract.",required=true) @PathVariable("contractId") String contractId,@ApiParam(value = "Id of the License Set.",required=true) @PathVariable("licenseSetId") String licenseSetId);

}
