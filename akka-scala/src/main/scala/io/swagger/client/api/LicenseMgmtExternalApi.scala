/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.ClientRequest
import io.swagger.client.model.Contract
import io.swagger.client.model.License
import io.swagger.client.model.LicenseList
import io.swagger.client.model.LicenseRequest
import io.swagger.client.model.LicenseSet
import io.swagger.client.model.RestError
import java.util.UUID
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object LicenseMgmtExternalApi {

  /**
   * Sets the default flag to true for this LicenseSet, and modifies all other licenseSets in this contract as default &#x3D; false 
   * 
   * Expected answers:
   *   code 201 :  (Created)
   *   code 400 : RestError (Not allowed)
   *   code 404 : RestError (Not found)
   * 
   * @param contractId Id of the legal entity contract.
   * @param licenseSetId Id of the License Set.
   */
  def contractContractIdLicensesetLicenseSetIdDefaultPost(contractId: String, licenseSetId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/contract/{contractId}/licenseset/{licenseSetId}/default", "application/json")
      .withPathParam("contractId", contractId)
      .withPathParam("licenseSetId", licenseSetId)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[RestError](400)
      .withErrorResponse[RestError](404)
        /**
   * Get a contract by its UUID
   * 
   * Expected answers:
   *   code 200 : Contract (Contract found)
   *   code 404 : RestError (Not found)
   * 
   * @param legalEntityId UUID of contract to be fetched
   */
  def getContractByLegalEntity(legalEntityId: UUID): ApiRequest[Contract] =
    ApiRequest[Contract](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/contract/legalEntity/{legalEntityId}", "application/json")
      .withPathParam("legalEntityId", legalEntityId)
      .withSuccessResponse[Contract](200)
      .withErrorResponse[RestError](404)
        /**
   * Get a contract by its UUID
   * 
   * Expected answers:
   *   code 200 : Contract (Contract found)
   *   code 404 : RestError (Not found)
   * 
   * @param providerId UUID of contract to be fetched
   */
  def getContractByProvider(providerId: UUID): ApiRequest[Contract] =
    ApiRequest[Contract](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/contract/provider/{providerId}", "application/json")
      .withPathParam("providerId", providerId)
      .withSuccessResponse[Contract](200)
      .withErrorResponse[RestError](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : License (Success)
   *   code 404 : RestError (Not found)
   * 
   * @param licenseId UUID of the license
   */
  def licenseLicenseIdGet(licenseId: UUID): ApiRequest[License] =
    ApiRequest[License](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/license/{licenseId}", "application/json")
      .withPathParam("licenseId", licenseId)
      .withSuccessResponse[License](200)
      .withErrorResponse[RestError](404)
        /**
   * if the license model includes a minimum count, and removing the client does not violate the minimum, (or no minimum) then end the client relationship and marks the license as deleted.  If the license model does have a minimum, and deleting the client violates that, then just marks the client as deleted and leaves the license as active and resets options to defaults (We wouldn&#39;t actually expect a min/max license type to have options however...)  If the license model is an MSA, then delete the license.  (All deletes are soft-deletes, btw) 
   * 
   * Expected answers:
   *   code 200 : License (Success - License assignments removed. License may be marked as deleted.)
   * 
   * @param licenseSetId 
   */
  def licenseLicenseSetLicenseSetIdDelete(licenseSetId: UUID): ApiRequest[License] =
    ApiRequest[License](ApiMethods.DELETE, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/license/licenseSet/{licenseSetId}", "application/json")
      .withPathParam("licenseSetId", licenseSetId)
      .withSuccessResponse[License](200)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : LicenseList (success)
   *   code 404 : RestError (not found)
   * 
   * @param legalEntityId Returns all licenses associated with a legal entity
   */
  def licensesSearchLegalEntityLegalEntityIdGet(legalEntityId: String): ApiRequest[LicenseList] =
    ApiRequest[LicenseList](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/licenses/search/legalEntity/{legalEntityId}", "application/json")
      .withPathParam("legalEntityId", legalEntityId)
      .withSuccessResponse[LicenseList](200)
      .withErrorResponse[RestError](404)
        /**
   * Returns all licenses that are visible to the user. Can be filtered to show licenses assigned for a specific company (if user has access to multiple companies), by license set (GM5, Audio, etc), or by Result set includes pagination information 
   * 
   * Expected answers:
   *   code 200 : LicenseSet (Success)
   *   code 400 : RestError (Not allowed)
   *   code 404 : RestError (Not found)
   * 
   * @param limit Number of rows to return per page.
   * @param page page number (1 based)
   * @param sort sort attributes
   * @param dir Sort direction; ascending or descending order. Default: ascending.
   * @param companyid filter by companyId
   * @param licensesetid filter by license set id
   * @param activeonly should results include only active license assignments (defaults to true)
   * @param contractid filter by contract id
   * @param clientid filter by client id
   */
  def listLicense(limit: Option[Int] = None, page: Option[Int] = None, sort: Option[String] = None, dir: Option[String] = None, companyid: Option[UUID] = None, licensesetid: Option[UUID] = None, activeonly: Option[Boolean], contractid: Option[UUID] = None, clientid: Option[UUID] = None): ApiRequest[LicenseSet] =
    ApiRequest[LicenseSet](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/license", "application/json")
      .withQueryParam("limit", limit)
      .withQueryParam("page", page)
      .withQueryParam("sort", sort)
      .withQueryParam("dir", dir)
      .withQueryParam("companyid", companyid)
      .withQueryParam("licensesetid", licensesetid)
      .withQueryParam("activeonly", activeonly)
      .withQueryParam("contractid", contractid)
      .withQueryParam("clientid", clientid)
      .withSuccessResponse[LicenseSet](200)
      .withErrorResponse[RestError](400)
      .withErrorResponse[RestError](404)
        /**
   * List all license-able components for a particular contract
   * 
   * Expected answers:
   *   code 200 : Seq[LicenseSet] (Success. If no results found, empty list)
   *   code 404 : RestError (Not found)
   * 
   * @param contractId 
   */
  def listLicenseSets(contractId: String): ApiRequest[Seq[LicenseSet]] =
    ApiRequest[Seq[LicenseSet]](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/contract/{contractId}/licenseset", "application/json")
      .withPathParam("contractId", contractId)
      .withSuccessResponse[Seq[LicenseSet]](200)
      .withErrorResponse[RestError](404)
        /**
   * Get a specific licenseSet
   * 
   * Expected answers:
   *   code 200 : LicenseSet (Success.)
   *   code 404 : RestError (Not found)
   * 
   * @param contractId Id of the legal entity contract.
   * @param licenseSetId Id of the License Set.
   */
  def listLicenseSetsByContract(contractId: String, licenseSetId: String): ApiRequest[LicenseSet] =
    ApiRequest[LicenseSet](ApiMethods.GET, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/contract/{contractId}/licenseset/{licenseSetId}", "application/json")
      .withPathParam("contractId", contractId)
      .withPathParam("licenseSetId", licenseSetId)
      .withSuccessResponse[LicenseSet](200)
      .withErrorResponse[RestError](404)
        /**
   * This call will change the assigned client information for the source type listed in the request body. It will put an endDate on the previously assigned client based on the startDate of the request body. 
   * 
   * Expected answers:
   *   code 200 : License (Success - License reassigned.)
   *   code 400 : RestError (Error creating license assignment for client (License not active, missing req&#39;d data)
   * 
   * @param licenseSetId 
   * @param client 
   */
  def modifyLicense(licenseSetId: UUID, client: ClientRequest): ApiRequest[License] =
    ApiRequest[License](ApiMethods.PUT, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/license/licenseSet/{licenseSetId}", "application/json")
      .withBody(client)
      .withPathParam("licenseSetId", licenseSetId)
      .withSuccessResponse[License](200)
      .withErrorResponse[RestError](400)
        /**
   * Allows an admin to modify the client assignment of an existing license. If a clientId is passed, then the license is assigned to the existing client. If a Client object is passed, a new client will be created and assigned. 
   * 
   * Expected answers:
   *   code 200 : License (Success)
   *   code 400 : RestError (max licenses already assigned for this licenseSet, or licenseSet not found)
   * 
   * @param licenseSetId UUID of the licenseSet
   * @param licenceUpdate 
   */
  def newLicense(licenseSetId: UUID, licenceUpdate: LicenseRequest): ApiRequest[License] =
    ApiRequest[License](ApiMethods.POST, "https://virtserver.swaggerhub.com/mpeppers/PGiLicenseManage/1.0.0", "/license/licenseSet/{licenseSetId}", "application/json")
      .withBody(licenceUpdate)
      .withPathParam("licenseSetId", licenseSetId)
      .withSuccessResponse[License](200)
      .withErrorResponse[RestError](400)
      

}

